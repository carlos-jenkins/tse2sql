# -*- coding: utf-8 -*-
#
# Copyright (C) 2016-2017 KuraLabs S.R.L
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

"""
MySQL SQL generator.
"""

from logging import getLogger

from tqdm import tqdm


log = getLogger(__name__)


SCHEMA = """\
-- MySQL Script generated by MySQL Workbench
-- mi√© 29 ene 2020 03:36:28 CST
-- Model: MiVotico - TSE Voters MySQL Database    Version: 1.2
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema tse2sql
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `tse2sql` ;

-- -----------------------------------------------------
-- Schema tse2sql
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `tse2sql` DEFAULT CHARACTER SET utf8mb4 ;
USE `tse2sql` ;

-- -----------------------------------------------------
-- Table `tse2sql`.`province`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tse2sql`.`province` (
  `id_province` TINYINT UNSIGNED NOT NULL,
  `name_province` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`id_province`))
ENGINE = InnoDB
COMMENT = 'Costa Rica has 7 provinces, plus one code for consulates.\nThe largest name was \"GUANACASTE\" (10 characters).';


-- -----------------------------------------------------
-- Table `tse2sql`.`canton`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tse2sql`.`canton` (
  `id_canton` SMALLINT UNSIGNED NOT NULL,
  `name_canton` VARCHAR(22) NOT NULL,
  `province_id_province` TINYINT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_canton`, `province_id_province`),
  INDEX `fk_canton_province_idx` (`province_id_province` ASC) VISIBLE,
  CONSTRAINT `fk_canton_province`
    FOREIGN KEY (`province_id_province`)
    REFERENCES `tse2sql`.`province` (`id_province`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'As of 01/2020 Costa Rica has 82 cantons (128 if including consulates).\nThe largest name was \"Emiratos Arabes Unidos\" (22 characters).';


-- -----------------------------------------------------
-- Table `tse2sql`.`district`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tse2sql`.`district` (
  `id_district` MEDIUMINT UNSIGNED NOT NULL,
  `name_district` VARCHAR(34) NOT NULL,
  `canton_id_canton` SMALLINT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_district`, `canton_id_canton`),
  INDEX `fk_district_canton_idx` (`canton_id_canton` ASC) VISIBLE,
  CONSTRAINT `fk_district_canton`
    FOREIGN KEY (`canton_id_canton`)
    REFERENCES `tse2sql`.`canton` (`id_canton`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'As of 01/2020 Costa Rica has 2077 districts (2133 if including consulates).\nThe largest name was \"Empalme Arriba Guaria(Parte Oeste)\" (34 characters).';


-- -----------------------------------------------------
-- Table `tse2sql`.`voter`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tse2sql`.`voter` (
  `id_voter` INT UNSIGNED NOT NULL,
  `sex` TINYINT UNSIGNED NOT NULL,
  `id_expiration` DATE NOT NULL,
  `name` VARCHAR(30) NOT NULL,
  `family_name_1` VARCHAR(26) NOT NULL,
  `family_name_2` VARCHAR(26) NOT NULL,
  `id_site` MEDIUMINT UNSIGNED NULL,
  `code` INT NULL,
  `district_id_district` MEDIUMINT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_voter`, `district_id_district`),
  INDEX `fk_voter_district_idx` (`district_id_district` ASC) VISIBLE,
  FULLTEXT INDEX `full_name_idx` (`name`, `family_name_1`, `family_name_2`) VISIBLE,
  CONSTRAINT `fk_voter_district`
    FOREIGN KEY (`district_id_district`)
    REFERENCES `tse2sql`.`district` (`id_district`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tse2sql`.`voting_center`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tse2sql`.`voting_center` (
  `id_voting_center` INT UNSIGNED NOT NULL,
  `name` VARCHAR(100) NOT NULL,
  `address` VARCHAR(100) NOT NULL,
  `latitude` DECIMAL(9,6) NOT NULL,
  `longitude` DECIMAL(9,6) NOT NULL,
  `district_id_district` MEDIUMINT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_voting_center`, `district_id_district`),
  INDEX `fk_voting_center_district1_idx` (`district_id_district` ASC) VISIBLE,
  UNIQUE INDEX `unique_id_name` (`name` ASC, `district_id_district` ASC) VISIBLE,
  CONSTRAINT `fk_voting_center_district1`
    FOREIGN KEY (`district_id_district`)
    REFERENCES `tse2sql`.`district` (`id_district`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tse2sql`.`site_per_voting_center`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tse2sql`.`site_per_voting_center` (
  `id_site` MEDIUMINT UNSIGNED NOT NULL,
  `voting_center_id_voting_center` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`id_site`, `voting_center_id_voting_center`),
  INDEX `fk_site_per_voting_center_voting_center1_idx` (`voting_center_id_voting_center` ASC) VISIBLE,
  CONSTRAINT `fk_site_per_voting_center_voting_center1`
    FOREIGN KEY (`voting_center_id_voting_center`)
    REFERENCES `tse2sql`.`voting_center` (`id_voting_center`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


"""  # noqa

SECTION_HEADER = """\
-- -----------------------------------------------------
-- Data for table `tse2sql`.`{name}`
-- -----------------------------------------------------
"""

FOOTER = """\

-- -----------------------------------------------------
-- Stored procedure `tse2sql`.`ASSIGN_CODES`
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS ASSIGN_CODES;
DELIMITER ;;

CREATE PROCEDURE ASSIGN_CODES()
BEGIN
    DECLARE district_id INT;
    DECLARE site_id INT;
    DECLARE district_done INT DEFAULT FALSE;
    DECLARE district_cursor CURSOR FOR
        SELECT DISTINCT id_district, id_site
        FROM district
            JOIN voter ON district.id_district = voter.district_id_district
        ORDER BY id_district, id_site ASC;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET district_done = TRUE;

    SET AUTOCOMMIT=0;

    OPEN district_cursor;
    district_loop: LOOP
        FETCH district_cursor INTO district_id, site_id;
        SELECT district_id, site_id;

        IF district_done THEN
            LEAVE district_loop;
        END IF;

        SET @counter := 0;
        UPDATE voter
            SET code = ( SELECT @counter := @counter + 1 )
            WHERE district_id_district = district_id AND id_site = site_id
            ORDER BY family_name_1, family_name_2, name ASC;
        COMMIT;
    END LOOP;
    CLOSE district_cursor;
END;
;;

DELIMITER ;

-- -----------------------------------------------------
-- Stored procedure `tse2sql`.`DENORMALIZE_DB`
-- -----------------------------------------------------

DROP PROCEDURE IF EXISTS DENORMALIZE_DB;
DELIMITER ;;

CREATE PROCEDURE DENORMALIZE_DB()
BEGIN

    DROP TABLE IF EXISTS `denormalized`;
    CREATE TABLE `tse2sql`.`denormalized` (
        `id_voter` INT UNSIGNED NOT NULL,
        `full_name` VARCHAR(84) NOT NULL,
        `sex` TINYINT UNSIGNED NOT NULL,
        `code` INT NOT NULL,
        `id_site` MEDIUMINT UNSIGNED NULL,
        `id_province` TINYINT UNSIGNED NOT NULL,
        `id_canton` SMALLINT UNSIGNED NOT NULL,
        `id_district` MEDIUMINT UNSIGNED NOT NULL,
        `voting_center_name` VARCHAR(100) NULL,
        `voting_center_address` VARCHAR(100) NULL,
        `voting_center_location` VARCHAR(70) NOT NULL,
        `voting_center_latitude` DECIMAL(9,6) NULL,
        `voting_center_longitude` DECIMAL(9,6) NULL,
        PRIMARY KEY (`id_voter`),
        INDEX `id_province_idx` (`id_province` ASC) VISIBLE,
        INDEX `id_canton_idx` (`id_canton` ASC) VISIBLE,
        INDEX `id_district_idx` (`id_district` ASC) VISIBLE,
        FULLTEXT INDEX `full_name_idx` (`full_name`) VISIBLE
    )
    ENGINE = InnoDB;

    INSERT INTO `tse2sql`.`denormalized` (
        `id_voter`,
        `full_name`,
        `sex`,
        `code`,
        `id_site`,
        `id_province`,
        `id_canton`,
        `id_district`,
        `voting_center_name`,
        `voting_center_address`,
        `voting_center_location`,
        `voting_center_latitude`,
        `voting_center_longitude`
    )
    SELECT
        `voter`.`id_voter`,
        CONCAT_WS(
            ' ',
            `voter`.`name`,
            `voter`.`family_name_1`,
            `voter`.`family_name_2`
        ) as `full_name`,
        `voter`.`sex`,
        `voter`.`code`,
        `voter`.`id_site`,
        `province`.`id_province`,
        `canton`.`id_canton`,
        `district`.`id_district`,
        `voting_center`.`name` AS `voting_center_name`,
        `voting_center`.`address` AS `voting_center_address`,
        CONCAT_WS(
            ', ',
            `district`.`name_district`,
            `canton`.`name_canton`,
            `province`.`name_province`
        ) AS `voting_center_location`,
        `voting_center`.`latitude` AS `voting_center_latitude`,
        `voting_center`.`longitude` AS `voting_center_longitude`
    FROM `voter`
        JOIN `district`
            ON `voter`.`district_id_district` =
               `district`.`id_district`
        JOIN `canton`
            ON `district`.`canton_id_canton` =
               `canton`.`id_canton`
        JOIN `province`
            ON `canton`.`province_id_province` =
               `province`.`id_province`
        JOIN `site_per_voting_center`
            ON `voter`.`id_site` =
               `site_per_voting_center`.`id_site`
        JOIN `voting_center`
            ON `site_per_voting_center`.`voting_center_id_voting_center` =
               `voting_center`.`id_voting_center`
    ORDER BY `id_voter` ASC;
END;
;;

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
"""

SCRAPPER_HEADER = """\

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

USE `tse2sql`;

"""

SCRAPPER_FOOTER = """\

ALTER TABLE voter
    ADD CONSTRAINT fk_id_site FOREIGN KEY (id_site)
    REFERENCES site_per_voting_center(id_site);

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
"""


def write_provinces(fd, provinces):
    """
    Write provinces INSERT INTO statement.
    """
    opening_statement = (
        'SET AUTOCOMMIT=0;\n'
        'INSERT INTO `province` VALUES\n'
    )

    fd.write(SECTION_HEADER.format(name='province'))
    fd.write(opening_statement)

    with tqdm(
        total=len(provinces), unit='e', leave=True, ascii=True,
        desc='INSERT INTO province'
    ) as pbar:

        for province_code, name in provinces.items():
            fd.write('(')
            fd.write(str(province_code))
            fd.write(', \'')
            fd.write(name.replace("'", "\\'"))
            fd.write('\'),\n')
            pbar.update(1)

    fd.seek(fd.tell() - 2)
    fd.write(';\nCOMMIT;\n\n\n')


def write_cantons(fd, cantons):
    """
    Write cantons INSERT INTO statement.
    """
    opening_statement = (
        'SET AUTOCOMMIT=0;\n'
        'INSERT INTO `canton` VALUES\n'
    )

    fd.write(SECTION_HEADER.format(name='canton'))
    fd.write(opening_statement)

    with tqdm(
        total=len(cantons), unit='e', leave=True, ascii=True,
        desc='INSERT INTO canton'
    ) as pbar:

        for (province_code, canton_code), name in cantons.items():
            fd.write('(')
            fd.write(str(province_code))
            fd.write('{:02d}'.format(canton_code))
            fd.write(', \'')
            fd.write(name.replace("'", "\\'"))
            fd.write('\', ')
            fd.write(str(province_code))
            fd.write('),\n')
            pbar.update(1)

    fd.seek(fd.tell() - 2)
    fd.write(';\nCOMMIT;\n\n\n')


def write_districts(fd, districts):
    """
    Write districts INSERT INTO statement.
    """
    opening_statement = (
        'SET AUTOCOMMIT=0;\n'
        'INSERT INTO `district` '
        '(`id_district`, `name_district`, `canton_id_canton`) '
        'VALUES\n'
    )
    fd.write(SECTION_HEADER.format(name='district'))
    fd.write(opening_statement)

    with tqdm(
        total=len(districts), unit='e', leave=True, ascii=True,
        desc='INSERT INTO district'
    ) as pbar:

        for num, ((province_code, canton_code, district_code), name) \
                in enumerate(districts.items()):

            if num % 1000 == 0 and num > 0:
                fd.seek(fd.tell() - 2)
                fd.write(';\nCOMMIT;\n\n\n')
                fd.write(opening_statement)

            fd.write('(')
            fd.write(str(province_code))
            fd.write('{:02d}'.format(canton_code))
            fd.write('{:03d}'.format(district_code))
            fd.write(', \'')
            fd.write(name.replace("'", "\\'"))
            fd.write('\', ')
            fd.write(str(province_code))
            fd.write('{:02d}'.format(canton_code))
            fd.write('),\n')
            pbar.update(1)

    fd.seek(fd.tell() - 2)
    fd.write(';\nCOMMIT;\n\n\n')


def write_voters(fd, voters):
    """
    Write voters INSERT INTO statement.
    """
    opening_statement = (
        'SET AUTOCOMMIT=0;\n'
        'INSERT INTO `voter` ('
        '`id_voter`, `sex`, `id_expiration`, `id_site`, `name`, '
        '`family_name_1`, `family_name_2`, `district_id_district`'
        ') VALUES\n'
    )

    fd.write(SECTION_HEADER.format(name='voter'))
    fd.write(opening_statement)

    with tqdm(
        total=voters.total_voters, unit='v', leave=True, ascii=True,
        unit_scale=True, desc='INSERT INTO voter'
    ) as pbar:

        for num, voter in enumerate(voters):

            if num % 1000 == 0 and num > 0:
                fd.seek(fd.tell() - 2)
                fd.write(';\nCOMMIT;\n\n\n')
                fd.write(opening_statement)

            fd.write('(')
            fd.write(str(voter['id'])),
            fd.write(', ')
            fd.write(str(voter['sex'])),
            fd.write(', \'')
            fd.write(voter['expiration'].strftime('%Y-%m-%d')),
            fd.write('\', ')
            fd.write(str(voter['site']))
            fd.write(', \'')
            fd.write(voter['name'].replace("'", "\\'"))
            fd.write('\', \'')
            fd.write(voter['family_name_1'].replace("'", "\\'"))
            fd.write('\', \'')
            fd.write(voter['family_name_2'].replace("'", "\\'"))
            fd.write('\', ')
            fd.write(str(voter['district']))
            fd.write('),\n')
            pbar.update(1)

    fd.seek(fd.tell() - 2)
    fd.write(';\nCOMMIT;\n\n\n')


def write_mysql(fd, payload):
    """
    Write MySQL SQL output.

    :param fd: Output file descriptor.
    :param payload: Generation payload with provinces, cantons, districts and
     voters data.
    """
    fd.write(SCHEMA)
    write_provinces(fd, payload['provinces'])
    write_cantons(fd, payload['cantons'])
    write_districts(fd, payload['districts'])
    write_voters(fd, payload['voters'])
    fd.write(FOOTER)


def write_mysql_scrapper(fd, data):
    """
    Write MySQL SQL output for scrapped data.

    :param fd: Output file descriptor.
    :param dict data: Scrapped data.
    """

    fd.write(SCRAPPER_HEADER)

    # First table
    opening_statement = """\
SET AUTOCOMMIT=0;
INSERT INTO `voting_center` (
    `id_voting_center`, `name`, `address`,
    `latitude`, `longitude`,
    `district_id_district`
) VALUES
"""
    fd.write(SECTION_HEADER.format(name='voting_center'))
    fd.write(opening_statement)

    with tqdm(
        total=len(data), unit='e', leave=True, ascii=True,
        unit_scale=True, desc='INSERT INTO voting_center'
    ) as pbar:

        for num, ((id_district, name), fields) in enumerate(data.items()):

            if num % 1000 == 0 and num > 0:
                fd.seek(fd.tell() - 2)
                fd.write(';\nCOMMIT;\n\n\n')
                fd.write(opening_statement)

            fd.write('(')
            fd.write(str(fields['id_voting_center']))
            fd.write(', \'')
            fd.write(name.replace("'", "\\'"))
            fd.write('\', \'')
            fd.write(fields['address'].replace("'", "\\'"))
            fd.write('\', ')
            fd.write(str(fields['latitude']))
            fd.write(', ')
            fd.write(str(fields['longitude']))
            fd.write(', ')
            fd.write(str(id_district))
            fd.write('),\n')
            pbar.update(1)

    fd.seek(fd.tell() - 2)
    fd.write(';\nCOMMIT;\n\n\n')

    # Second table
    opening_statement = """\
SET AUTOCOMMIT=0;
INSERT INTO `site_per_voting_center` (
    `id_site`, `voting_center_id_voting_center`
) VALUES
"""
    fd.write(SECTION_HEADER.format(name='site_per_voting_center'))
    fd.write(opening_statement)

    with tqdm(
        total=len(data), unit='e', leave=True, ascii=True,
        unit_scale=True, desc='INSERT INTO site_per_voting_center'
    ) as pbar:

        num = 0
        for (id_district, name), fields in data.items():
            for id_site in fields['id_sites']:

                if num % 1000 == 0 and num > 0:
                    num = 0
                    fd.seek(fd.tell() - 2)
                    fd.write(';\nCOMMIT;\n\n\n')
                    fd.write(opening_statement)

                fd.write('(')
                fd.write(str(id_site))
                fd.write(', ')
                fd.write(str(fields['id_voting_center']))
                fd.write('),\n')

                num += 1
            pbar.update(1)

    fd.seek(fd.tell() - 2)
    fd.write(';\nCOMMIT;\n\n\n')

    fd.write(SCRAPPER_FOOTER)


__all__ = ['write_mysql', 'write_mysql_scrapper']
