#!/usr/bin/env python3

# The bulldozer is a script that consumes a TSE MySQL database and flats and
# denormalized the data into a MongoDB database.

from datetime import datetime, time

from pymongo import MongoClient
from pymysql import connect, cursors
from setproctitle import setproctitle
from bson.decimal128 import Decimal128


BASE_QUERY = (
    'SELECT id_voter, name, family_name_1, family_name_2, sex, '
    'id_expiration, name_province, name_canton, name_district, site, '
    'voting_center_name, voting_center_address, '
    'voting_center_latitude, voting_center_longitude '
    'FROM voter '
    'JOIN district ON voter.district_id_district = district.id_district '
    'JOIN canton ON district.canton_id_canton = canton.id_canton '
    'JOIN province ON canton.province_id_province = province.id_province '
    'ORDER BY id_voter ASC;'
)


def flat_data(mysql, mongo):
    flatdb = mongo.tse2sql.voters

    print('Creating cursor ...')
    with mysql.cursor() as cursor:

        print('Executing query ...')
        cursor.execute(BASE_QUERY)

        row_count = 0
        inserted_id = 0

        print('Starting iteration ...')
        for row in cursor:

            row['_id'] = row['id_voter']

            # MongoDB doesn't support a date data type, convert to datetime
            row['id_expiration'] = datetime.combine(
                row['id_expiration'], time.min
            )

            # Convert Decimals to bson Decimal128
            for key in ['voting_center_latitude', 'voting_center_longitude']:
                row[key] = Decimal128(row[key])

            # Row is in the form of:
            #
            # {
            #     'id_voter': 112121212,
            #     'name': 'Jose',
            #     'family_name_1': 'Apellido1',
            #     'family_name_2': 'Apellido2',
            #     'sex': 1,  # <- 1 -> Female, 2 -> Male
            #     'id_expiration': datetime.date(2023, 11, 19),
            #     'name_province': 'San Jose',
            #     'name_canton': 'Santa Ana',
            #     'name_district': 'Piedades',
            #     'site': 1220,
            #     'voting_center_name': 'Escuela Ezequiel Morales Aguilar',
            #     'voting_center_address': 'Costado sur de iglesia catolica',
            #     'voting_center_latitude': Decimal('9.928517'),
            #     'voting_center_longitude': Decimal('-84.217010'),
            #     '_id': 100339724
            # }

            inserted_id = flatdb.insert_one(row).inserted_id

            row_count += 1
            if (row_count % 1000) == 0:
                print('Inserted ID {} at iteration {} ...'.format(
                    inserted_id, row_count
                ))

        print('Flattening finished with ID {} at iteration {}!'.format(
            inserted_id, row_count
        ))


def main():
    setproctitle('bulldozer')
    print('Starting the bulldozer ...')

    mysql = None
    mongo = None

    try:
        print('Connecting to MySQL ...')
        mysql = connect(
            read_default_file='~/.my.cnf',
            db='tse2sql',
            charset='utf8mb4',
            cursorclass=cursors.SSDictCursor,
        )

        print('Connecting to MongoDB ...')
        mongo = MongoClient(
            'mongodb://localhost:27017/'
        )

        print('Flatting data ...')
        flat_data(mysql, mongo)

    finally:
        if mysql is not None:
            mysql.close()
        if mongo is not None:
            mongo.close()


if __name__ == '__main__':
    main()
