#!/usr/bin/env python3

# The bulldozer is a script that consumes a TSE MySQL database and flats and
# denormalized the data into a MongoDB database.

from pymongo import MongoClient
from pymysql import connect, cursors
from setproctitle import setproctitle
from bson.decimal128 import Decimal128


BASE_QUERY = """\
SELECT
    id_voter, code, site,
    CONCAT_WS(' ', name, family_name_1, family_name_2) AS full_name,
    voting_center_name, voting_center_address,
    CONCAT_WS(', ', name_district, name_canton, name_province) AS voting_center_location,
    voting_center_latitude, voting_center_longitude
FROM voter
JOIN district ON voter.district_id_district = district.id_district
JOIN canton ON district.canton_id_canton = canton.id_canton
JOIN province ON canton.province_id_province = province.id_province
ORDER BY id_voter ASC;
"""  # noqa


def flat_data(mysql, mongo):
    """
    Row is in the form of::

        {
            'id_voter': 100920539,
            'code': 17,
            'site': 1070,
            'full_name': 'Marta Villalta Cascante',
            'voting_center_name': 'Hogar De Ancianos Corteza Amarilla',
            'voting_center_address': 'De la clinica catolica 100 este y 75 norte',
            'voting_center_location': 'H.A. Corteza Amarilla Emmanuel, Goicoechea, San Jose',
            'voting_center_latitude': Decimal128('9.948460'),
            'voting_center_longitude': Decimal128('-84.057370'),
        }
    """  # noqa
    voters = mongo.tse2sql.voters

    print('Creating cursor ...')
    with mysql.cursor() as cursor:

        print('Executing query ...')
        cursor.execute(BASE_QUERY)

        row_count = 0
        inserted_id = 0

        print('Starting iteration ...')
        for row in cursor:

            row['_id'] = row['id_voter']

            # Convert Decimals to bson Decimal128
            for key in ['voting_center_latitude', 'voting_center_longitude']:

                # Some districts may have invalid coordinates if the scrapper
                # failed on them.
                if row[key] is None:
                    continue
                row[key] = Decimal128(row[key])

            inserted_id = voters.insert_one(row).inserted_id

            row_count += 1
            if (row_count % 1000) == 0:
                print('Inserted ID {} at iteration {} ...'.format(
                    inserted_id, row_count
                ))

        print('Flattening finished with ID {} at iteration {}!'.format(
            inserted_id, row_count
        ))


def main():
    setproctitle('bulldozer')
    print('Starting the bulldozer ...')

    mysql = None
    mongo = None

    try:
        print('Connecting to MySQL ...')
        mysql = connect(
            read_default_file='~/.my.cnf',
            db='tse2sql',
            charset='utf8mb4',
            cursorclass=cursors.SSDictCursor,
        )

        print('Connecting to MongoDB ...')
        mongo = MongoClient(
            'mongodb://localhost:27017/'
        )

        print('Flatting data ...')
        flat_data(mysql, mongo)

    finally:
        if mysql is not None:
            mysql.close()
        if mongo is not None:
            mongo.close()


if __name__ == '__main__':
    main()
