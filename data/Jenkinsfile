pipeline {
    agent none

    stages {
        stage('Build') {
            agent {
                docker {
                    image 'kuralabs/mivotico-tse2sql:latest'
                    args '--init'
                }
            }

            steps {
                sh '''#!/usr/bin/env bash

                    set -o errexit
                    set -o nounset
                    set -o xtrace

                    echo "Executing entrypoint ..."
                    entrypoint.sh

                    echo "Installing tse2sql ..."
                    tox -e build
                    pip3 install dist/tse2sql-*.whl

                    SOURCE_URL=http://www.tse.go.cr/zip/padron/padron_completo.zip
                    ARCHIVE_URL=https://archive.kuralabs.io/mivotico/tse2sql

                    mkdir datasrc
                    pushd datasrc

                    echo "Downloading new data source ..."
                    curl --output padron.zip "${SOURCE_URL}"

                    echo "Calculating data hash ..."
                    DATA_HASH=$(sha256sum --binary padron.zip | cut -d' ' -f 1)

                    echo "Data hash : ${DATA_HASH}"
                    echo "{" > latest.json
                    echo "    \\"latest\\": \\"${DATA_HASH}\\"," >> latest.json
                    echo "    \\"date\\": \\"$(date --iso-8601=min)\\"" >> latest.json
                    echo "}" >> latest.json

                    echo "Checking archive for ${DATA_HASH} ..."
                    DATA_AVAILABLE=$(curl --silent --head "${ARCHIVE_URL}/${DATA_HASH}/${DATA_HASH}.zip" | grep "404 Not Found" || true)

                    if [ -z "${DATA_AVAILABLE}" ]; then
                        echo "Data source ${DATA_HASH} already processed. Exiting ..."
                        rm padron.zip
                        exit 0
                    fi

                    echo "New data source ${DATA_HASH}. Processing ..."
                    mkdir "${DATA_HASH}"
                    pushd "${DATA_HASH}"
                    mv ../padron.zip "${DATA_HASH}.zip"
                    tse2sql "${DATA_HASH}.zip"

                    echo "Removing extracted data ..."
                    rm -r "${DATA_HASH}"

                    echo "Base data collected. Starting scrapper ..."
                    tse2sql-scrapper "${DATA_HASH}.samples.json"

                    echo "Creating MySQL database ..."
                    echo -e "[client]\nuser=root\npassword=defaultrootpwd" > ~/.my.cnf
                    echo "CREATE DATABASE tse2sql;" | mysql

                    echo "Inserting new data into database ..."
                    echo "SET @start := NOW(); source ${DATA_HASH}.mysql.sql; SET @end := NOW(); SELECT TIMEDIFF(@end, @start);" | mysql --database="tse2sql"

                    echo "Inserting scrapped data into database ..."
                    echo "SET @start := NOW(); source ${DATA_HASH}.scrapped.mysql.sql; SET @end := NOW(); SELECT TIMEDIFF(@end, @start);" | mysql --database="tse2sql"

                    echo "Compressing MySQL data for archival ..."
                    tar -zcvf "${DATA_HASH}.mysql.tar.gz" "${DATA_HASH}.mysql.sql" "${DATA_HASH}.scrapped.mysql.sql"
                    rm "${DATA_HASH}.mysql.sql" "${DATA_HASH}.scrapped.mysql.sql"

                    echo "Executing the data bulldozer ..."
                    pip3 install -r tools/bulldozer/requirements.txt
                    ./tools/bulldozer/bulldozer

                    echo "Compressing MongoDB data for archival ..."
                    mongodump --archive="${DATA_HASH}.mongodb.gz" --gzip --db tse2sql

                    popd
                    popd
                '''
                stash name: 'data', includes: 'datasrc/**/*'
            }
        }

        stage('Publish') {
            agent { label 'archive' }
            steps {
                unstash 'data'
                sh '''#!/usr/bin/env bash

                    set -o errexit
                    set -o nounset
                    set -o xtrace

                    umask 022
                    mkdir -p /deploy/archive/mivotico/tse2sql
                    cp -R datasrc/* /deploy/archive/mivotico/tse2sql/
                '''
            }
        }
    }
    post {
        success {
            slackSend (
                color: '#00FF00',
                message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
            )
        }

        failure {
            slackSend (
                color: '#FF0000',
                message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
            )
        }
    }
}
