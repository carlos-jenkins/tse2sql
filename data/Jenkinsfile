pipeline {
    agent none

    stages {
        stage('Build') {

            agent {
                docker {
                    image 'kuralabs/mivotico-tse2sql:latest'
                    args '--init'
                }
            }

            steps {
                sh '''#!/usr/bin/env bash

                set -o errexit
                set -o nounset
                set -o xtrace

                echo "Installing tse2sql ..."
                tox -e build
                pip3 install dist/tse2sql-*.whl

                SOURCE_URL=http://www.tse.go.cr/zip/padron/padron_completo.zip

                mkdir datasrc
                pushd datasrc

                echo "Downloading new data source ..."
                curl --output padron.zip "${SOURCE_URL}"

                echo "Calculating data hash ..."
                DATA_HASH=$(sha256sum --binary padron.zip | cut -d' ' -f 1)
                TIMESTAMP=$(date +%s)

                echo "Data hash : ${DATA_HASH}"
                echo "{" > latest.json
                echo "    \\"latest\\": \\"${DATA_HASH}\\"," >> latest.json
                echo "    \\"date\\": \\"${TIMESTAMP}\\"" >> latest.json
                echo "}" >> latest.json

                echo "New data source ${TIMESTAMP}. Processing ..."
                mkdir "${TIMESTAMP}"
                pushd "${TIMESTAMP}"
                mv ../padron.zip "${TIMESTAMP}.zip"
                tse2sql "${TIMESTAMP}.zip"

                echo "Removing extracted data ..."
                rm -r "${TIMESTAMP}"

                echo "Base data collected. Starting scrapper ..."
                tse2sql-scrapper "${TIMESTAMP}.samples.json"

                echo "Creating credentials file for MySQL ..."
                echo -e "[client]\nuser=root\npassword=defaultrootpwd" > ~/.my.cnf

                echo "Inserting new data into database ..."
                echo "SET @start := NOW(); source ${TIMESTAMP}.mysql.sql; SET @end := NOW(); SELECT TIMEDIFF(@end, @start);" | mysql

                echo "Inserting scrapped data into database ..."
                echo "SET @start := NOW(); source ${TIMESTAMP}.scrapped.mysql.sql; SET @end := NOW(); SELECT TIMEDIFF(@end, @start);" | mysql

                echo "Assigning code to voters ..."
                echo "SET @start := NOW(); USE tse2sql; CALL ASSIGN_CODES(); SET @end := NOW(); SELECT TIMEDIFF(@end, @start);" | mysql

                echo "Exporting final MySQL database for archival ..."
                mysqldump tse2sql > "${TIMESTAMP}.final.mysql.sql"

                echo "Compressing MySQL data for archival ..."
                tar -zcvf \
                    "${TIMESTAMP}.mysql.tar.gz" \
                    "${TIMESTAMP}.mysql.sql" \
                    "${TIMESTAMP}.scrapped.mysql.sql" \
                    "${TIMESTAMP}.final.mysql.sql"
                rm \
                    "${TIMESTAMP}.mysql.sql" \
                    "${TIMESTAMP}.scrapped.mysql.sql" \
                    "${TIMESTAMP}.final.mysql.sql"

                echo "Building names lookup table for production ..."
                echo "SET @start := NOW(); USE tse2sql; CALL CREATE_NAMES_LOOKUP(); SET @end := NOW(); SELECT TIMEDIFF(@end, @start);" | mysql

                echo "Exporting names lookup table ..."
                mysqldump tse2sql voter_names_lookup | gzip > "${TIMESTAMP}.lookup.mysql.sql.gz"

                popd
                popd
                '''
                stash name: 'data', includes: 'datasrc/**/*'
            }
        }

        stage('Publish') {
            agent { label 'archive' }
            steps {
                unstash 'data'
                sh '''#!/usr/bin/env bash

                    set -o errexit
                    set -o nounset
                    set -o xtrace

                    umask 022
                    mkdir -p /deploy/archive/mivotico/tse2sql
                    cp -R datasrc/* /deploy/archive/mivotico/tse2sql/
                '''
            }
        }
    }
    post {
        success {
            slackSend (
                color: '#00FF00',
                message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
            )
        }

        failure {
            slackSend (
                color: '#FF0000',
                message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})"
            )
        }
    }
}
